1 -Git Hooks: Створіть простий pre-commit hook, який запускається автоматично перед кожним комітом. Цей hook повинен перевіряти, чи немає у файлів, які ви комітите, синтаксичних помилок. Ви можете використати будь-який інструмент для перевірки синтаксису, залежно від мови програмування, яку ви використовуєте.
2 - Git Bisect: Створіть новий проект або використайте існуючий. Додайте в ньому баг, наприклад, виключення або помилку. Зробіть декілька комітів після внесення помилки. Використовуйте git bisect для визначення коміту, в якому було внесено помилку.
3- Розуміння і використання Git Stash: Ви працюєте над функцією в новій гілці, але вам потрібно швидко перемкнутися на іншу гілку, щоб внести деякі важливі зміни. Проте ви не хочете комітити незавершену роботу. Використайте git stash для збереження своїх незавершених змін та повернення до них пізніше.
4 - Розуміння та використання Git Submodules: Іноді в проектах використовуються зовнішні бібліотеки або модулі, які можуть бути підключені як субмодулі в Git. Створіть проект, який включає в себе інший проект як субмодуль.
1. Clone:

Клонування в гіті використовується для створення копії віддаленого репозиторію на локальному комп'ютері.
За допомогою команди git clone + посилання на репозиторій ми копіюємо весь вміст репозиторія на особистий компʼютер
2. Fork:

Fork в гіті використовується на платформах де можна працювати разом з іншими девами, по типу ГІтхаб, Гітлаб, Бітбакет і дозволяє створити копію чужого репозиторію в особистому репозиторії.
Після fork інша людина може внести зміни в своїй копії репозиторію, а потім може надати різні зміни власникові репозиторію через Pull Request.
3. Branch:

Branch в гіті - це відокремлена лінія розвитку в рамках одного репозиторію. Вона дозволяє вести роботу над конкретною функцією чи виправленням, не впливаючи на інші гілки.
Деви. користувачі можуть створювати гілки для різних функцій чи завдань, переходити між ними, злити гілки та використовувати їх для розвитку проекту паралельно.


Різниця:

Clone: Створює копію всього репозиторію на локальному комп'ютері.
Fork: Створює копію віддаленого репозиторію на сервері та дозволяє користувачеві внести зміни та надсилати їх назад в оригінальний репозиторій через Pull Request.
Branch: Створює відокремлену лінію розвитку всередині одного репозиторію, що дозволяє працювати над різними функціями або завданнями паралельно.

Що таке Pull Request: Прочитайте документацію або інші джерела та напишіть відповідь, в якій пояснюється, що таке pull request та як його використовувати в роботі.

Pull Request — це запит на включення змін з однієї гілки в іншу. В основному ми використовуємо пул ріквест для того, щоб злити гілки в головну і щоб інші користувачі мали змогу теж мати в себе нові зміни за допомогою команди git pull
 

Різниця між git pull і git fetch: Прочитайте документацію або інші джерела та напишіть відповідь, в якій пояснюється, в чому полягає різниця між цими командами.

git fetch  Він не автоматично об'єднує зміни у поточній гілці. Зазвичай ми використовуємо це для того, щоб оновити значення про нові гілки які були створенні

git pull ця команда автоматично об'єднує гілки і оновлює їхнє значення, тобто можна сказати що це команда яка обʼєднує в собі дві git fetch і git merge
За допомогою цієї команди git stash я приховав зміни, а потім за допомогою git pop застосував та видалив сховані зміни, але ми можемо ще використати git stash apply,щоб просто застосувати сховані зміни, також можемо повністю видалити сховані зміни без їх застосування командою git stash drop
Git Revert:

git revert створює новий коміт, який відкочує зміни, зроблені в попередньому коміті.
Цей метод не видаляє історію комітів і дозволяє зберегти раніше зроблені зміни.
Використовується, коли важливо зберегти історію змін.
Git Reset:

git reset використовується для скидання голови гілки на певний коміт.
Він може бути використаний для видалення комітів або зміни історії.
Але використання git reset може призвести до втрати даних, оскільки він змінює історію комітів.
